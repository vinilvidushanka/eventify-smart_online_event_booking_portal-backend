import User from "../model/user.model";
import type { UserType } from "../model/user.model";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import {UserDto} from "../dto/user.dto";

dotenv.config();
const JWT_SECRET = process.env.JWT_SECRET as string;
const REFRESH_TOKEN_SECRET = process.env.REFRESH_TOKEN_SECRET as string;

const refreshTokens = new Set();

const organizerUser:UserType ={
    id:1,
    username:"mainOrganizer",
    email:"mainOrganizer@gmail.com",
    password: bcrypt.hashSync("1234",10),
    role:"organizer"
}

const customerUser:UserType={
    id:2,
    username:"customer",
    email:"customer@gmail.com",
    password: bcrypt.hashSync("1234",10),
    role:"customer"
}

const userList:User[] = [organizerUser,customerUser];
userList.push(organizerUser);
userList.push(customerUser);

/*
export const authenticateUser = (username:string,password:string) => {
    const existingUser = userList.find(user =>user.username === username);

    if (!existingUser || !bcrypt.compareSync(password,existingUser.password)){
        return null;
    }

    const accessToken = jwt.sign({
        id:existingUser.id,
        username:existingUser.username,
        role:existingUser.role
    },JWT_SECRET,{expiresIn:"5m"});

    const refreshToken = jwt.sign({
        username:existingUser.username
    },REFRESH_TOKEN_SECRET,{expiresIn:"7d"});

    refreshTokens.add(refreshToken);
    return {accessToken,refreshToken};

}*/

export const authenticateUser = (username: string, password: string) => {
    // Allow login by username or email
    const existingUser = userList.find(
        user => user.username === username || user.email === username
    );

    if (!existingUser || !bcrypt.compareSync(password, existingUser.password)) {
        return null;
    }

    const accessToken = jwt.sign(
        {
            id: existingUser.id,
            username: existingUser.username,
            role: existingUser.role
        },
        JWT_SECRET,
        { expiresIn: "5m" }
    );

    const refreshToken = jwt.sign(
        {
            username: existingUser.username
        },
        REFRESH_TOKEN_SECRET,
        { expiresIn: "7d" }
    );

    refreshTokens.add(refreshToken);
    return { accessToken, refreshToken };
}

export const saveUser = async (user : UserDto):Promise<UserDto> => {
    return await User.create(user);
}

export const validateUsers = async (user : UserDto):Promise<string | null> => {
    if (!user.username || !user.email || !user.password || !user.role) {
        return "All fields are required";
    }
    return null;
}